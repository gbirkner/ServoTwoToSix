
Basic Peripherals mega328pb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000f1e  00000fb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ab  0080017a  0080017a  0000102c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001088  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000010c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002479  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c8  00000000  00000000  00003819  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001267  00000000  00000000  00004ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  00005d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eb8  00000000  00000000  000063f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e87  00000000  00000000  000072b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00008137  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_13>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_18>
  4c:	0c 94 40 04 	jmp	0x880	; 0x880 <__vector_19>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e1       	ldi	r30, 0x1E	; 30
  c8:	ff e0       	ldi	r31, 0x0F	; 15
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 37       	cpi	r26, 0x7A	; 122
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	aa e7       	ldi	r26, 0x7A	; 122
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 32       	cpi	r26, 0x25	; 37
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 04 01 	call	0x208	; 0x208 <main>
  ea:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 77 01 	call	0x2ee	; 0x2ee <system_init>
  f6:	08 95       	ret

000000f8 <measure>:
	drive();
	display();

	// Schedule next display() to be called
	return process_cycles;
}
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <ADC_0_get_conversion>
  fe:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <measurement+0x1>
 102:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <measurement>
 106:	68 ee       	ldi	r22, 0xE8	; 232
 108:	73 e0       	ldi	r23, 0x03	; 3
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret

00000110 <drive>:
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	c0 91 1d 02 	lds	r28, 0x021D	; 0x80021d <measurement>
 118:	d0 91 1e 02 	lds	r29, 0x021E	; 0x80021e <measurement+0x1>
 11c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <ADC_0_get_resolution>
 120:	88 50       	subi	r24, 0x08	; 8
 122:	02 c0       	rjmp	.+4      	; 0x128 <drive+0x18>
 124:	d6 95       	lsr	r29
 126:	c7 95       	ror	r28
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <drive+0x14>
 12c:	d0 93 1c 02 	sts	0x021C, r29	; 0x80021c <duty+0x1>
 130:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <duty>
 134:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <duty>
 138:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <duty+0x1>
 13c:	0e 94 b8 01 	call	0x370	; 0x370 <PWM_0_load_duty_cycle_ch0>
 140:	68 ee       	ldi	r22, 0xE8	; 232
 142:	73 e0       	ldi	r23, 0x03	; 3
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <display>:
 14e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <measurement>
 152:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <measurement+0x1>
 156:	9f 93       	push	r25
 158:	8f 93       	push	r24
 15a:	8e e4       	ldi	r24, 0x4E	; 78
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	9f 93       	push	r25
 160:	8f 93       	push	r24
 162:	0e 94 af 04 	call	0x95e	; 0x95e <printf>
 166:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <duty>
 16a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <duty+0x1>
 16e:	9f 93       	push	r25
 170:	8f 93       	push	r24
 172:	87 e5       	ldi	r24, 0x57	; 87
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	9f 93       	push	r25
 178:	8f 93       	push	r24
 17a:	0e 94 af 04 	call	0x95e	; 0x95e <printf>
 17e:	8d b7       	in	r24, 0x3d	; 61
 180:	9e b7       	in	r25, 0x3e	; 62
 182:	08 96       	adiw	r24, 0x08	; 8
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	9e bf       	out	0x3e, r25	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	8d bf       	out	0x3d, r24	; 61
 18e:	60 ea       	ldi	r22, 0xA0	; 160
 190:	7f e0       	ldi	r23, 0x0F	; 15
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret

00000198 <clock1>:

static absolutetime_t clock1()
{
	printf("clock1=%d\r\n", clock_1++);
 198:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <clock_1>
 19c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <clock_1+0x1>
 1a0:	9c 01       	movw	r18, r24
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <clock_1+0x1>
 1aa:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <clock_1>
 1ae:	9f 93       	push	r25
 1b0:	8f 93       	push	r24
 1b2:	82 e6       	ldi	r24, 0x62	; 98
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9f 93       	push	r25
 1b8:	8f 93       	push	r24
 1ba:	0e 94 af 04 	call	0x95e	; 0x95e <printf>

	// Schedule next clock1() to be called
	return clock1_cycles;
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
}
 1c6:	60 e4       	ldi	r22, 0x40	; 64
 1c8:	7f e1       	ldi	r23, 0x1F	; 31
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <clock2>:

static absolutetime_t clock2()
{
	printf("clock2=%d\r\n", clock_2++);
 1d0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 1d4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 1d8:	9c 01       	movw	r18, r24
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <__data_end+0x1>
 1e2:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <__data_end>
 1e6:	9f 93       	push	r25
 1e8:	8f 93       	push	r24
 1ea:	8e e6       	ldi	r24, 0x6E	; 110
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	9f 93       	push	r25
 1f0:	8f 93       	push	r24
 1f2:	0e 94 af 04 	call	0x95e	; 0x95e <printf>

	// Schedule next clock2() to be called
	return clock2_cycles;
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
}
 1fe:	60 e8       	ldi	r22, 0x80	; 128
 200:	7e e3       	ldi	r23, 0x3E	; 62
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	08 95       	ret

00000208 <main>:
extern timer_struct_t *TIMER_0_list_head;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 208:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	sei();
 20c:	78 94       	sei

	// Add tasks to scheduler

	TIMER_0_timeout_create(&measure_handle, measure_cycles);
 20e:	48 ee       	ldi	r20, 0xE8	; 232
 210:	53 e0       	ldi	r21, 0x03	; 3
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 0c 03 	call	0x618	; 0x618 <TIMER_0_timeout_create>
	TIMER_0_timeout_create(&drive_handle, drive_cycles);
 21e:	48 ee       	ldi	r20, 0xE8	; 232
 220:	53 e0       	ldi	r21, 0x03	; 3
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	8e e1       	ldi	r24, 0x1E	; 30
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 0c 03 	call	0x618	; 0x618 <TIMER_0_timeout_create>
	TIMER_0_timeout_create(&display_handle, display_cycles);
 22e:	40 ea       	ldi	r20, 0xA0	; 160
 230:	5f e0       	ldi	r21, 0x0F	; 15
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	84 e1       	ldi	r24, 0x14	; 20
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 0c 03 	call	0x618	; 0x618 <TIMER_0_timeout_create>

	// TIMER_0_timeout_create(&process_handle, process_cycles);

	TIMER_0_timeout_create(&clock1_handle, clock1_cycles);
 23e:	40 e4       	ldi	r20, 0x40	; 64
 240:	5f e1       	ldi	r21, 0x1F	; 31
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	8a e0       	ldi	r24, 0x0A	; 10
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 0c 03 	call	0x618	; 0x618 <TIMER_0_timeout_create>
	TIMER_0_timeout_create(&clock2_handle, clock2_cycles);
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5e e3       	ldi	r21, 0x3E	; 62
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 0c 03 	call	0x618	; 0x618 <TIMER_0_timeout_create>

	while (1) {
		// Returns immediately if no callback is ready to execute
		TIMER_0_timeout_call_next_callback();
 25e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <TIMER_0_timeout_call_next_callback>
 262:	fd cf       	rjmp	.-6      	; 0x25e <main+0x56>

00000264 <ADC_0_init>:
	ADCSRA |= (1 << ADEN);
}

void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
 264:	e4 e6       	ldi	r30, 0x64	; 100
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	80 83       	st	Z, r24
 26e:	80 ec       	ldi	r24, 0xC0	; 192
 270:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 274:	84 e8       	ldi	r24, 0x84	; 132
 276:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 27a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 95       	ret

00000282 <ADC_0_start_conversion>:
}

void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
 282:	ec e7       	ldi	r30, 0x7C	; 124
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	90 81       	ld	r25, Z
 288:	90 7f       	andi	r25, 0xF0	; 240
 28a:	90 83       	st	Z, r25
	ADMUX |= channel;
 28c:	90 81       	ld	r25, Z
 28e:	89 2b       	or	r24, r25
 290:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 292:	ea e7       	ldi	r30, 0x7A	; 122
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	80 83       	st	Z, r24
 29c:	08 95       	ret

0000029e <ADC_0_is_conversion_done>:
}

bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
 29e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
 2a2:	82 95       	swap	r24
 2a4:	81 70       	andi	r24, 0x01	; 1
 2a6:	08 95       	ret

000002a8 <ADC_0_get_conversion_result>:

adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
 2a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2ac:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2b0:	90 e0       	ldi	r25, 0x00	; 0
}
 2b2:	92 2b       	or	r25, r18
 2b4:	08 95       	ret

000002b6 <ADC_0_get_conversion>:

adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
 2b6:	0e 94 41 01 	call	0x282	; 0x282 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 2ba:	0e 94 4f 01 	call	0x29e	; 0x29e <ADC_0_is_conversion_done>
 2be:	88 23       	and	r24, r24
 2c0:	e1 f3       	breq	.-8      	; 0x2ba <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
 2c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ADC_0_get_conversion_result>
	ADCSRA |= (1 << ADIF);
 2c6:	ea e7       	ldi	r30, 0x7A	; 122
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	20 81       	ld	r18, Z
 2cc:	20 61       	ori	r18, 0x10	; 16
 2ce:	20 83       	st	Z, r18
	return res;
}
 2d0:	08 95       	ret

000002d2 <ADC_0_get_resolution>:

uint8_t ADC_0_get_resolution()
{
	return 10;
}
 2d2:	8a e0       	ldi	r24, 0x0A	; 10
 2d4:	08 95       	ret

000002d6 <PWM_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_timeout_init();
 2d6:	56 9a       	sbi	0x0a, 6	; 10
 2d8:	5e 98       	cbi	0x0b, 6	; 11
 2da:	0e 94 a9 01 	call	0x352	; 0x352 <PWM_0_init>
 2de:	08 95       	ret

000002e0 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 2e0:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 2e2:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 2e4:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 2e6:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 2e8:	0e 94 8b 04 	call	0x916	; 0x916 <USART_0_init>
 2ec:	08 95       	ret

000002ee <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 2ee:	8d e3       	ldi	r24, 0x3D	; 61
 2f0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 2fa:	94 b1       	in	r25, 0x04	; 4
 2fc:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 2fe:	95 b1       	in	r25, 0x05	; 5
 300:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 302:	97 b1       	in	r25, 0x07	; 7
 304:	90 78       	andi	r25, 0x80	; 128
 306:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 308:	98 b1       	in	r25, 0x08	; 8
 30a:	9f 67       	ori	r25, 0x7F	; 127
 30c:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 30e:	9a b1       	in	r25, 0x0a	; 10
 310:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 312:	9b b1       	in	r25, 0x0b	; 11
 314:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 316:	8d b1       	in	r24, 0x0d	; 13
 318:	80 7f       	andi	r24, 0xF0	; 240
 31a:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 31c:	8e b1       	in	r24, 0x0e	; 14
 31e:	8f 60       	ori	r24, 0x0F	; 15
 320:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	60 e8       	ldi	r22, 0x80	; 128
 326:	81 e6       	ldi	r24, 0x61	; 97
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 a2 01 	call	0x344	; 0x344 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 32e:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 330:	15 be       	out	0x35, r1	; 53

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
 332:	0e 94 32 01 	call	0x264	; 0x264 <ADC_0_init>

	sysctrl_init();

	ADC_0_initialization();

	PWM_0_initialization();
 336:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <PWM_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_timeout_init();
 33a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <TIMER_0_timeout_init>

	PWM_0_initialization();

	TIMER_0_initialization();

	USART_0_initialization();
 33e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <USART_0_initialization>
 342:	08 95       	ret

00000344 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 344:	2f b7       	in	r18, 0x3f	; 63
	cli
 346:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 348:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 34a:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 34c:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 34e:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 350:	08 95       	ret

00000352 <PWM_0_init>:
	OCR0B = duty_value;
}

void PWM_0_register_callback(pwm_irq_cb_t f)
{
	PWM_0_cb = f;
 352:	e4 e6       	ldi	r30, 0x64	; 100
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	8f 7d       	andi	r24, 0xDF	; 223
 35a:	80 83       	st	Z, r24
 35c:	83 e8       	ldi	r24, 0x83	; 131
 35e:	84 bd       	out	0x24, r24	; 36
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	85 bd       	out	0x25, r24	; 37
 364:	80 e1       	ldi	r24, 0x10	; 16
 366:	87 bd       	out	0x27, r24	; 39
 368:	80 e2       	ldi	r24, 0x20	; 32
 36a:	88 bd       	out	0x28, r24	; 40
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret

00000370 <PWM_0_load_duty_cycle_ch0>:
 370:	87 bd       	out	0x27, r24	; 39
 372:	08 95       	ret

00000374 <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TIFR0 |= (1 << TOV0);
 380:	a8 9a       	sbi	0x15, 0	; 21

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_0_INTERRUPT_CB_RATE) && (PWM_0_INTERRUPT_CB_RATE != 0)) {
 382:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <callback_count.1833>
 386:	8f 5f       	subi	r24, 0xFF	; 255
 388:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <callback_count.1833>
		if (PWM_0_cb != NULL) {
			PWM_0_cb();
		}
	}
}
 38c:	8f 91       	pop	r24
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <TIMER_0_dummy_handler>:
	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = TIMER_0_execute_queue_head;
	while (tmp->next != NULL)
		tmp = tmp->next;

	tmp->next = timer;
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	cb 01       	movw	r24, r22
 39e:	08 95       	ret

000003a0 <TIMER_0_timeout_init>:
 3a0:	e4 e6       	ldi	r30, 0x64	; 100
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	87 7f       	andi	r24, 0xF7	; 247
 3a8:	80 83       	st	Z, r24
 3aa:	85 e0       	ldi	r24, 0x05	; 5
 3ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 3b6:	08 95       	ret

000003b8 <TIMER_0_stop_timeouts>:
 3b8:	ef e6       	ldi	r30, 0x6F	; 111
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	8e 7f       	andi	r24, 0xFE	; 254
 3c0:	80 83       	st	Z, r24
 3c2:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
 3c6:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
 3ca:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
 3ce:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
 3d2:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <TIMER_0_is_running>
 3d6:	08 95       	ret

000003d8 <TIMER_0_sorted_insert>:
 3d8:	cf 92       	push	r12
 3da:	df 92       	push	r13
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	ec 01       	movw	r28, r24
 3ea:	0e 81       	ldd	r16, Y+6	; 0x06
 3ec:	1f 81       	ldd	r17, Y+7	; 0x07
 3ee:	28 85       	ldd	r18, Y+8	; 0x08
 3f0:	39 85       	ldd	r19, Y+9	; 0x09
 3f2:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <TIMER_0_list_head>
 3f6:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <TIMER_0_list_head+0x1>
 3fa:	1d 82       	std	Y+5, r1	; 0x05
 3fc:	1c 82       	std	Y+4, r1	; 0x04
 3fe:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
 402:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
 406:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
 40a:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
 40e:	04 17       	cp	r16, r20
 410:	15 07       	cpc	r17, r21
 412:	26 07       	cpc	r18, r22
 414:	37 07       	cpc	r19, r23
 416:	c0 f5       	brcc	.+112    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 418:	16 96       	adiw	r26, 0x06	; 6
 41a:	cd 90       	ld	r12, X+
 41c:	dd 90       	ld	r13, X+
 41e:	ed 90       	ld	r14, X+
 420:	fc 90       	ld	r15, X
 422:	19 97       	sbiw	r26, 0x09	; 9
 424:	10 97       	sbiw	r26, 0x00	; 0
 426:	91 f0       	breq	.+36     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 428:	fd 01       	movw	r30, r26
 42a:	46 81       	ldd	r20, Z+6	; 0x06
 42c:	57 81       	ldd	r21, Z+7	; 0x07
 42e:	60 85       	ldd	r22, Z+8	; 0x08
 430:	71 85       	ldd	r23, Z+9	; 0x09
 432:	4c 19       	sub	r20, r12
 434:	5d 09       	sbc	r21, r13
 436:	6e 09       	sbc	r22, r14
 438:	7f 09       	sbc	r23, r15
 43a:	46 83       	std	Z+6, r20	; 0x06
 43c:	57 83       	std	Z+7, r21	; 0x07
 43e:	60 87       	std	Z+8, r22	; 0x08
 440:	71 87       	std	Z+9, r23	; 0x09
 442:	04 80       	ldd	r0, Z+4	; 0x04
 444:	f5 81       	ldd	r31, Z+5	; 0x05
 446:	e0 2d       	mov	r30, r0
 448:	30 97       	sbiw	r30, 0x00	; 0
 44a:	79 f7       	brne	.-34     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 44c:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
 450:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
 454:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
 458:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
 45c:	4c 19       	sub	r20, r12
 45e:	5d 09       	sbc	r21, r13
 460:	6e 09       	sbc	r22, r14
 462:	7f 09       	sbc	r23, r15
 464:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
 468:	50 93 85 01 	sts	0x0185, r21	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
 46c:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
 470:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
 474:	2f 5f       	subi	r18, 0xFF	; 255
 476:	3f 4f       	sbci	r19, 0xFF	; 255
 478:	0c 19       	sub	r16, r12
 47a:	1d 09       	sbc	r17, r13
 47c:	2e 09       	sbc	r18, r14
 47e:	3f 09       	sbc	r19, r15
 480:	0e 83       	std	Y+6, r16	; 0x06
 482:	1f 83       	std	Y+7, r17	; 0x07
 484:	28 87       	std	Y+8, r18	; 0x08
 486:	39 87       	std	Y+9, r19	; 0x09
 488:	10 97       	sbiw	r26, 0x00	; 0
 48a:	89 f1       	breq	.+98     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 48c:	16 96       	adiw	r26, 0x06	; 6
 48e:	4d 91       	ld	r20, X+
 490:	5d 91       	ld	r21, X+
 492:	6d 91       	ld	r22, X+
 494:	7c 91       	ld	r23, X
 496:	19 97       	sbiw	r26, 0x09	; 9
 498:	04 17       	cp	r16, r20
 49a:	15 07       	cpc	r17, r21
 49c:	26 07       	cpc	r18, r22
 49e:	37 07       	cpc	r19, r23
 4a0:	58 f4       	brcc	.+22     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a2:	25 c0       	rjmp	.+74     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4a4:	46 81       	ldd	r20, Z+6	; 0x06
 4a6:	57 81       	ldd	r21, Z+7	; 0x07
 4a8:	60 85       	ldd	r22, Z+8	; 0x08
 4aa:	71 85       	ldd	r23, Z+9	; 0x09
 4ac:	04 17       	cp	r16, r20
 4ae:	15 07       	cpc	r17, r21
 4b0:	26 07       	cpc	r18, r22
 4b2:	37 07       	cpc	r19, r23
 4b4:	a0 f0       	brcs	.+40     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4b6:	df 01       	movw	r26, r30
 4b8:	14 96       	adiw	r26, 0x04	; 4
 4ba:	ed 91       	ld	r30, X+
 4bc:	fc 91       	ld	r31, X
 4be:	15 97       	sbiw	r26, 0x05	; 5
 4c0:	30 97       	sbiw	r30, 0x00	; 0
 4c2:	81 f7       	brne	.-32     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4c4:	0c c0       	rjmp	.+24     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4c6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <TIMER_0_dummy+0x4>
 4ca:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <TIMER_0_dummy+0x5>
 4ce:	9d 83       	std	Y+5, r25	; 0x05
 4d0:	8c 83       	std	Y+4, r24	; 0x04
 4d2:	d0 93 8b 01 	sts	0x018B, r29	; 0x80018b <TIMER_0_list_head+0x1>
 4d6:	c0 93 8a 01 	sts	0x018A, r28	; 0x80018a <TIMER_0_list_head>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	26 c0       	rjmp	.+76     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 4de:	fd 83       	std	Y+5, r31	; 0x05
 4e0:	ec 83       	std	Y+4, r30	; 0x04
 4e2:	15 96       	adiw	r26, 0x05	; 5
 4e4:	dc 93       	st	X, r29
 4e6:	ce 93       	st	-X, r28
 4e8:	14 97       	sbiw	r26, 0x04	; 4
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	1e c0       	rjmp	.+60     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 4ee:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TIMER_0_last_timer_load>
 4f2:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <TIMER_0_last_timer_load+0x1>
 4f6:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <TIMER_0_last_timer_load+0x2>
 4fa:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <TIMER_0_last_timer_load+0x3>
 4fe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <TIMER_0_last_timer_load>
 502:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <TIMER_0_last_timer_load+0x1>
 506:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <TIMER_0_last_timer_load+0x2>
 50a:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <TIMER_0_last_timer_load+0x3>
 50e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 512:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 516:	b0 9a       	sbi	0x16, 0	; 22
 518:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <TIMER_0_list_head>
 51c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TIMER_0_list_head+0x1>
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	82 33       	cpi	r24, 0x32	; 50
 524:	92 07       	cpc	r25, r18
 526:	99 f6       	brne	.-90     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 528:	ce cf       	rjmp	.-100    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	df 90       	pop	r13
 538:	cf 90       	pop	r12
 53a:	08 95       	ret

0000053c <TIMER_0_start_timer_at_head>:
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	ef e6       	ldi	r30, 0x6F	; 111
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	8e 7f       	andi	r24, 0xFE	; 254
 548:	80 83       	st	Z, r24
 54a:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <TIMER_0_list_head>
 54e:	f0 91 8b 01 	lds	r31, 0x018B	; 0x80018b <TIMER_0_list_head+0x1>
 552:	30 97       	sbiw	r30, 0x00	; 0
 554:	19 f4       	brne	.+6      	; 0x55c <TIMER_0_start_timer_at_head+0x20>
 556:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <TIMER_0_stop_timeouts>
 55a:	5b c0       	rjmp	.+182    	; 0x612 <TIMER_0_start_timer_at_head+0xd6>
 55c:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
 560:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
 564:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
 568:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
 56c:	86 81       	ldd	r24, Z+6	; 0x06
 56e:	97 81       	ldd	r25, Z+7	; 0x07
 570:	a0 85       	ldd	r26, Z+8	; 0x08
 572:	b1 85       	ldd	r27, Z+9	; 0x09
 574:	84 1b       	sub	r24, r20
 576:	95 0b       	sbc	r25, r21
 578:	a6 0b       	sbc	r26, r22
 57a:	b7 0b       	sbc	r27, r23
 57c:	00 97       	sbiw	r24, 0x00	; 0
 57e:	01 e0       	ldi	r16, 0x01	; 1
 580:	a0 07       	cpc	r26, r16
 582:	b1 05       	cpc	r27, r1
 584:	00 f1       	brcs	.+64     	; 0x5c6 <TIMER_0_start_timer_at_head+0x8a>
 586:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
 58a:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
 58e:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
 592:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
 596:	a2 e3       	ldi	r26, 0x32	; 50
 598:	b1 e0       	ldi	r27, 0x01	; 1
 59a:	41 50       	subi	r20, 0x01	; 1
 59c:	51 09       	sbc	r21, r1
 59e:	6f 4f       	sbci	r22, 0xFF	; 255
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	16 96       	adiw	r26, 0x06	; 6
 5a4:	4d 93       	st	X+, r20
 5a6:	5d 93       	st	X+, r21
 5a8:	6d 93       	st	X+, r22
 5aa:	7c 93       	st	X, r23
 5ac:	19 97       	sbiw	r26, 0x09	; 9
 5ae:	15 96       	adiw	r26, 0x05	; 5
 5b0:	fc 93       	st	X, r31
 5b2:	ee 93       	st	-X, r30
 5b4:	14 97       	sbiw	r26, 0x04	; 4
 5b6:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <TIMER_0_list_head+0x1>
 5ba:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <TIMER_0_list_head>
 5be:	8f ef       	ldi	r24, 0xFF	; 255
 5c0:	9f ef       	ldi	r25, 0xFF	; 255
 5c2:	a0 e0       	ldi	r26, 0x00	; 0
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	4f ef       	ldi	r20, 0xFF	; 255
 5c8:	5f ef       	ldi	r21, 0xFF	; 255
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	8a 01       	movw	r16, r20
 5d0:	9b 01       	movw	r18, r22
 5d2:	08 1b       	sub	r16, r24
 5d4:	19 0b       	sbc	r17, r25
 5d6:	2a 0b       	sbc	r18, r26
 5d8:	3b 0b       	sbc	r19, r27
 5da:	00 93 80 01 	sts	0x0180, r16	; 0x800180 <TIMER_0_last_timer_load>
 5de:	10 93 81 01 	sts	0x0181, r17	; 0x800181 <TIMER_0_last_timer_load+0x1>
 5e2:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <TIMER_0_last_timer_load+0x2>
 5e6:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <TIMER_0_last_timer_load+0x3>
 5ea:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <TIMER_0_last_timer_load>
 5ee:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <TIMER_0_last_timer_load+0x1>
 5f2:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <TIMER_0_last_timer_load+0x2>
 5f6:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <TIMER_0_last_timer_load+0x3>
 5fa:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 5fe:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 602:	ef e6       	ldi	r30, 0x6F	; 111
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	80 83       	st	Z, r24
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <TIMER_0_is_running>
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <TIMER_0_timeout_create>:
		TIMER_0_timeout_create(callback_timer, reschedule);
	}
}

void TIMER_0_timeout_create(timer_struct_t *timer, absolutetime_t timeout)
{
 618:	cf 92       	push	r12
 61a:	df 92       	push	r13
 61c:	ef 92       	push	r14
 61e:	ff 92       	push	r15
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
	TIMSK1 &= ~(1 << TOIE1);
 624:	ef e6       	ldi	r30, 0x6F	; 111
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	20 81       	ld	r18, Z
 62a:	2e 7f       	andi	r18, 0xFE	; 254
 62c:	20 83       	st	Z, r18
	TCNT1                   = TIMER_0_last_timer_load;
}

inline absolutetime_t TIMER_0_make_absolute(absolutetime_t timeout)
{
	timeout += TIMER_0_absolute_time_of_last_timeout;
 62e:	00 91 84 01 	lds	r16, 0x0184	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
 632:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
 636:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
 63a:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
 63e:	40 0f       	add	r20, r16
 640:	51 1f       	adc	r21, r17
 642:	62 1f       	adc	r22, r18
 644:	73 1f       	adc	r23, r19
	timeout += TIMER_0_is_running ? TCNT1 - TIMER_0_last_timer_load : 0;
 646:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <TIMER_0_is_running>
 64a:	22 23       	and	r18, r18
 64c:	99 f0       	breq	.+38     	; 0x674 <TIMER_0_timeout_create+0x5c>
 64e:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 652:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 656:	c0 90 80 01 	lds	r12, 0x0180	; 0x800180 <TIMER_0_last_timer_load>
 65a:	d0 90 81 01 	lds	r13, 0x0181	; 0x800181 <TIMER_0_last_timer_load+0x1>
 65e:	e0 90 82 01 	lds	r14, 0x0182	; 0x800182 <TIMER_0_last_timer_load+0x2>
 662:	f0 90 83 01 	lds	r15, 0x0183	; 0x800183 <TIMER_0_last_timer_load+0x3>
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	0c 19       	sub	r16, r12
 66c:	1d 09       	sbc	r17, r13
 66e:	2e 09       	sbc	r18, r14
 670:	3f 09       	sbc	r19, r15
 672:	03 c0       	rjmp	.+6      	; 0x67a <TIMER_0_timeout_create+0x62>
 674:	00 e0       	ldi	r16, 0x00	; 0
 676:	10 e0       	ldi	r17, 0x00	; 0
 678:	98 01       	movw	r18, r16

void TIMER_0_timeout_create(timer_struct_t *timer, absolutetime_t timeout)
{
	TIMSK1 &= ~(1 << TOIE1);

	timer->absolute_time = TIMER_0_make_absolute(timeout);
 67a:	40 0f       	add	r20, r16
 67c:	51 1f       	adc	r21, r17
 67e:	62 1f       	adc	r22, r18
 680:	73 1f       	adc	r23, r19
 682:	fc 01       	movw	r30, r24
 684:	46 83       	std	Z+6, r20	; 0x06
 686:	57 83       	std	Z+7, r21	; 0x07
 688:	60 87       	std	Z+8, r22	; 0x08
 68a:	71 87       	std	Z+9, r23	; 0x09

	// We only have to start the timer at head if the insert was at the head
	if (TIMER_0_sorted_insert(timer)) {
 68c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <TIMER_0_sorted_insert>
 690:	88 23       	and	r24, r24
 692:	19 f0       	breq	.+6      	; 0x69a <TIMER_0_timeout_create+0x82>
		TIMER_0_start_timer_at_head();
 694:	0e 94 9e 02 	call	0x53c	; 0x53c <TIMER_0_start_timer_at_head>
 698:	09 c0       	rjmp	.+18     	; 0x6ac <TIMER_0_timeout_create+0x94>
	} else {
		if (TIMER_0_is_running)
 69a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <TIMER_0_is_running>
 69e:	88 23       	and	r24, r24
 6a0:	29 f0       	breq	.+10     	; 0x6ac <TIMER_0_timeout_create+0x94>
			TIMSK1 |= (1 << TOIE1);
 6a2:	ef e6       	ldi	r30, 0x6F	; 111
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	81 60       	ori	r24, 0x01	; 1
 6aa:	80 83       	st	Z, r24
	}
}
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	ff 90       	pop	r15
 6b2:	ef 90       	pop	r14
 6b4:	df 90       	pop	r13
 6b6:	cf 90       	pop	r12
 6b8:	08 95       	ret

000006ba <TIMER_0_timeout_call_next_callback>:

	tmp->next = timer;
}

void TIMER_0_timeout_call_next_callback(void)
{
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29

	if (TIMER_0_execute_queue_head == NULL)
 6be:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <TIMER_0_execute_queue_head>
 6c2:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <TIMER_0_execute_queue_head+0x1>
 6c6:	89 2b       	or	r24, r25
 6c8:	f1 f0       	breq	.+60     	; 0x706 <TIMER_0_timeout_call_next_callback+0x4c>
		return;

	// Critical section needed if TIMER_0_timeout_call_next_callback()
	// was called from polling loop, and not called from ISR.
	ENTER_CRITICAL(T);
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	f8 94       	cli
 6ce:	0f 92       	push	r0
	timer_struct_t *callback_timer = TIMER_0_execute_queue_head;
 6d0:	c0 91 88 01 	lds	r28, 0x0188	; 0x800188 <TIMER_0_execute_queue_head>
 6d4:	d0 91 89 01 	lds	r29, 0x0189	; 0x800189 <TIMER_0_execute_queue_head+0x1>

	// Done, remove from list
	TIMER_0_execute_queue_head = TIMER_0_execute_queue_head->next;
 6d8:	8c 81       	ldd	r24, Y+4	; 0x04
 6da:	9d 81       	ldd	r25, Y+5	; 0x05
 6dc:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <TIMER_0_execute_queue_head+0x1>
 6e0:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <TIMER_0_execute_queue_head>

	EXIT_CRITICAL(T); // End critical section
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63

	absolutetime_t reschedule = callback_timer->callback_ptr(callback_timer->payload);
 6e8:	e8 81       	ld	r30, Y
 6ea:	f9 81       	ldd	r31, Y+1	; 0x01
 6ec:	8a 81       	ldd	r24, Y+2	; 0x02
 6ee:	9b 81       	ldd	r25, Y+3	; 0x03
 6f0:	09 95       	icall

	// Do we have to reschedule it? If yes then add delta to absolute for reschedule
	if (reschedule) {
 6f2:	61 15       	cp	r22, r1
 6f4:	71 05       	cpc	r23, r1
 6f6:	81 05       	cpc	r24, r1
 6f8:	91 05       	cpc	r25, r1
 6fa:	29 f0       	breq	.+10     	; 0x706 <TIMER_0_timeout_call_next_callback+0x4c>
		TIMER_0_timeout_create(callback_timer, reschedule);
 6fc:	ab 01       	movw	r20, r22
 6fe:	bc 01       	movw	r22, r24
 700:	ce 01       	movw	r24, r28
 702:	0e 94 0c 03 	call	0x618	; 0x618 <TIMER_0_timeout_create>
	}
}
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <__vector_13>:
	}
}

// NOTE: assumes the callback completes before the next timer tick
ISR(TIMER1_OVF_vect)
{
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	timer_struct_t *next                  = TIMER_0_list_head->next;
 72e:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <TIMER_0_list_head>
 732:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <TIMER_0_list_head+0x1>
 736:	14 96       	adiw	r26, 0x04	; 4
 738:	2d 91       	ld	r18, X+
 73a:	3c 91       	ld	r19, X
 73c:	15 97       	sbiw	r26, 0x05	; 5
	TIMER_0_absolute_time_of_last_timeout = TIMER_0_list_head->absolute_time;
 73e:	16 96       	adiw	r26, 0x06	; 6
 740:	4d 91       	ld	r20, X+
 742:	5d 91       	ld	r21, X+
 744:	6d 91       	ld	r22, X+
 746:	7c 91       	ld	r23, X
 748:	19 97       	sbiw	r26, 0x09	; 9
 74a:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <TIMER_0_absolute_time_of_last_timeout>
 74e:	50 93 85 01 	sts	0x0185, r21	; 0x800185 <TIMER_0_absolute_time_of_last_timeout+0x1>
 752:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <TIMER_0_absolute_time_of_last_timeout+0x2>
 756:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <TIMER_0_absolute_time_of_last_timeout+0x3>
	TIMER_0_last_timer_load               = 0;
 75a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TIMER_0_last_timer_load>
 75e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <TIMER_0_last_timer_load+0x1>
 762:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <TIMER_0_last_timer_load+0x2>
 766:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <TIMER_0_last_timer_load+0x3>

	if (TIMER_0_list_head != &TIMER_0_dummy)
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	a2 33       	cpi	r26, 0x32	; 50
 76e:	b8 07       	cpc	r27, r24
 770:	b1 f0       	breq	.+44     	; 0x79e <__vector_13+0x92>
}

inline void TIMER_0_enqueue_callback(timer_struct_t *timer)
{
	timer_struct_t *tmp;
	timer->next = NULL;
 772:	15 96       	adiw	r26, 0x05	; 5
 774:	1c 92       	st	X, r1
 776:	1e 92       	st	-X, r1
 778:	14 97       	sbiw	r26, 0x04	; 4

	// Special case for empty list
	if (TIMER_0_execute_queue_head == NULL) {
 77a:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <TIMER_0_execute_queue_head>
 77e:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <TIMER_0_execute_queue_head+0x1>
 782:	30 97       	sbiw	r30, 0x00	; 0
 784:	31 f4       	brne	.+12     	; 0x792 <__vector_13+0x86>
		TIMER_0_execute_queue_head = timer;
 786:	b0 93 89 01 	sts	0x0189, r27	; 0x800189 <TIMER_0_execute_queue_head+0x1>
 78a:	a0 93 88 01 	sts	0x0188, r26	; 0x800188 <TIMER_0_execute_queue_head>
 78e:	07 c0       	rjmp	.+14     	; 0x79e <__vector_13+0x92>
	}

	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = TIMER_0_execute_queue_head;
	while (tmp->next != NULL)
		tmp = tmp->next;
 790:	fc 01       	movw	r30, r24
		return;
	}

	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = TIMER_0_execute_queue_head;
	while (tmp->next != NULL)
 792:	84 81       	ldd	r24, Z+4	; 0x04
 794:	95 81       	ldd	r25, Z+5	; 0x05
 796:	00 97       	sbiw	r24, 0x00	; 0
 798:	d9 f7       	brne	.-10     	; 0x790 <__vector_13+0x84>
		tmp = tmp->next;

	tmp->next = timer;
 79a:	b5 83       	std	Z+5, r27	; 0x05
 79c:	a4 83       	std	Z+4, r26	; 0x04

	if (TIMER_0_list_head != &TIMER_0_dummy)
		TIMER_0_enqueue_callback(TIMER_0_list_head);

	// Remove expired timer for the list now (it is always the one at the head)
	TIMER_0_list_head = next;
 79e:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <TIMER_0_list_head+0x1>
 7a2:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <TIMER_0_list_head>

	TIMER_0_start_timer_at_head();
 7a6:	0e 94 9e 02 	call	0x53c	; 0x53c <TIMER_0_start_timer_at_head>
}
 7aa:	ff 91       	pop	r31
 7ac:	ef 91       	pop	r30
 7ae:	bf 91       	pop	r27
 7b0:	af 91       	pop	r26
 7b2:	9f 91       	pop	r25
 7b4:	8f 91       	pop	r24
 7b6:	7f 91       	pop	r23
 7b8:	6f 91       	pop	r22
 7ba:	5f 91       	pop	r21
 7bc:	4f 91       	pop	r20
 7be:	3f 91       	pop	r19
 7c0:	2f 91       	pop	r18
 7c2:	0f 90       	pop	r0
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	0f 90       	pop	r0
 7c8:	1f 90       	pop	r1
 7ca:	18 95       	reti

000007cc <default_rx_isr>:
	USART_0_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_0_rxbuf[tmptail];
}
 7cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7d0:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <USART_0_rx_head>
 7d4:	ef 5f       	subi	r30, 0xFF	; 255
 7d6:	e7 70       	andi	r30, 0x07	; 7
 7d8:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <USART_0_rx_head>
 7dc:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <USART_0_rx_tail>
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	ee 5e       	subi	r30, 0xEE	; 238
 7e4:	fd 4f       	sbci	r31, 0xFD	; 253
 7e6:	80 83       	st	Z, r24
 7e8:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <USART_0_rx_elements>
 7ec:	8f 5f       	subi	r24, 0xFF	; 255
 7ee:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <USART_0_rx_elements>
 7f2:	08 95       	ret

000007f4 <default_udre_isr>:
 7f4:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <USART_0_tx_elements>
 7f8:	88 23       	and	r24, r24
 7fa:	89 f0       	breq	.+34     	; 0x81e <default_udre_isr+0x2a>
 7fc:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <USART_0_tx_tail>
 800:	ef 5f       	subi	r30, 0xFF	; 255
 802:	ef 77       	andi	r30, 0x7F	; 127
 804:	e0 93 8d 01 	sts	0x018D, r30	; 0x80018d <USART_0_tx_tail>
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	e1 57       	subi	r30, 0x71	; 113
 80c:	fe 4f       	sbci	r31, 0xFE	; 254
 80e:	80 81       	ld	r24, Z
 810:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 814:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <USART_0_tx_elements>
 818:	81 50       	subi	r24, 0x01	; 1
 81a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <USART_0_tx_elements>
 81e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <USART_0_tx_elements>
 822:	81 11       	cpse	r24, r1
 824:	05 c0       	rjmp	.+10     	; 0x830 <default_udre_isr+0x3c>
 826:	e1 ec       	ldi	r30, 0xC1	; 193
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	8f 7d       	andi	r24, 0xDF	; 223
 82e:	80 83       	st	Z, r24
 830:	08 95       	ret

00000832 <__vector_18>:
 832:	1f 92       	push	r1
 834:	0f 92       	push	r0
 836:	0f b6       	in	r0, 0x3f	; 63
 838:	0f 92       	push	r0
 83a:	11 24       	eor	r1, r1
 83c:	2f 93       	push	r18
 83e:	3f 93       	push	r19
 840:	4f 93       	push	r20
 842:	5f 93       	push	r21
 844:	6f 93       	push	r22
 846:	7f 93       	push	r23
 848:	8f 93       	push	r24
 84a:	9f 93       	push	r25
 84c:	af 93       	push	r26
 84e:	bf 93       	push	r27
 850:	ef 93       	push	r30
 852:	ff 93       	push	r31
 854:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <rx_isr_cb>
 858:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <rx_isr_cb+0x1>
 85c:	09 95       	icall
 85e:	ff 91       	pop	r31
 860:	ef 91       	pop	r30
 862:	bf 91       	pop	r27
 864:	af 91       	pop	r26
 866:	9f 91       	pop	r25
 868:	8f 91       	pop	r24
 86a:	7f 91       	pop	r23
 86c:	6f 91       	pop	r22
 86e:	5f 91       	pop	r21
 870:	4f 91       	pop	r20
 872:	3f 91       	pop	r19
 874:	2f 91       	pop	r18
 876:	0f 90       	pop	r0
 878:	0f be       	out	0x3f, r0	; 63
 87a:	0f 90       	pop	r0
 87c:	1f 90       	pop	r1
 87e:	18 95       	reti

00000880 <__vector_19>:
 880:	1f 92       	push	r1
 882:	0f 92       	push	r0
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	0f 92       	push	r0
 888:	11 24       	eor	r1, r1
 88a:	2f 93       	push	r18
 88c:	3f 93       	push	r19
 88e:	4f 93       	push	r20
 890:	5f 93       	push	r21
 892:	6f 93       	push	r22
 894:	7f 93       	push	r23
 896:	8f 93       	push	r24
 898:	9f 93       	push	r25
 89a:	af 93       	push	r26
 89c:	bf 93       	push	r27
 89e:	ef 93       	push	r30
 8a0:	ff 93       	push	r31
 8a2:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <udre_isr_cb>
 8a6:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <udre_isr_cb+0x1>
 8aa:	09 95       	icall
 8ac:	ff 91       	pop	r31
 8ae:	ef 91       	pop	r30
 8b0:	bf 91       	pop	r27
 8b2:	af 91       	pop	r26
 8b4:	9f 91       	pop	r25
 8b6:	8f 91       	pop	r24
 8b8:	7f 91       	pop	r23
 8ba:	6f 91       	pop	r22
 8bc:	5f 91       	pop	r21
 8be:	4f 91       	pop	r20
 8c0:	3f 91       	pop	r19
 8c2:	2f 91       	pop	r18
 8c4:	0f 90       	pop	r0
 8c6:	0f be       	out	0x3f, r0	; 63
 8c8:	0f 90       	pop	r0
 8ca:	1f 90       	pop	r1
 8cc:	18 95       	reti

000008ce <USART_0_write>:
void USART_0_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_0_tx_head + 1) & USART_0_TX_BUFFER_MASK;
 8ce:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <USART_0_tx_head>
 8d2:	2f 5f       	subi	r18, 0xFF	; 255
 8d4:	2f 77       	andi	r18, 0x7F	; 127
	/* Wait for free space in buffer */
	while (USART_0_tx_elements == USART_0_TX_BUFFER_SIZE)
 8d6:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <USART_0_tx_elements>
 8da:	90 38       	cpi	r25, 0x80	; 128
 8dc:	e1 f3       	breq	.-8      	; 0x8d6 <USART_0_write+0x8>
		;
	/* Store data in buffer */
	USART_0_txbuf[tmphead] = data;
 8de:	e2 2f       	mov	r30, r18
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	e1 57       	subi	r30, 0x71	; 113
 8e4:	fe 4f       	sbci	r31, 0xFE	; 254
 8e6:	80 83       	st	Z, r24
	/* Store new index */
	USART_0_tx_head = tmphead;
 8e8:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <USART_0_tx_head>
	ENTER_CRITICAL(W);
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	f8 94       	cli
 8f0:	0f 92       	push	r0
	USART_0_tx_elements++;
 8f2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <USART_0_tx_elements>
 8f6:	8f 5f       	subi	r24, 0xFF	; 255
 8f8:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <USART_0_tx_elements>
	EXIT_CRITICAL(W);
 8fc:	0f 90       	pop	r0
 8fe:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR0B |= (1 << UDRIE0);
 900:	e1 ec       	ldi	r30, 0xC1	; 193
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	80 62       	ori	r24, 0x20	; 32
 908:	80 83       	st	Z, r24
 90a:	08 95       	ret

0000090c <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 90c:	0e 94 67 04 	call	0x8ce	; 0x8ce <USART_0_write>
	return 0;
}
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	08 95       	ret

00000916 <USART_0_init>:
{

	// Module is in UART mode

	/* Enable USART0 */
	PRR0 &= ~(1 << PRUSART0);
 916:	e4 e6       	ldi	r30, 0x64	; 100
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	8d 7f       	andi	r24, 0xFD	; 253
 91e:	80 83       	st	Z, r24

#define BAUD 57600

#include <utils/setbaud.h>

	UBRR0H = UBRRH_VALUE;
 920:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 924:	82 e2       	ldi	r24, 0x22	; 34
 926:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0A = USE_2X << U2X0 /*  */
 92a:	82 e0       	ldi	r24, 0x02	; 2
 92c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	         | 0 << MPCM0;  /* Multi-processor Communication Mode: disabled */

	UCSR0B = 1 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
 930:	88 e9       	ldi	r24, 0x98	; 152
 932:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	USART_0_rx_tail     = x;
 936:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <USART_0_rx_tail>
	USART_0_rx_head     = x;
 93a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <USART_0_rx_head>
	USART_0_rx_elements = x;
 93e:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <USART_0_rx_elements>
	USART_0_tx_tail     = x;
 942:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <USART_0_tx_tail>
	USART_0_tx_head     = x;
 946:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <USART_0_tx_head>
	USART_0_tx_elements = x;
 94a:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <USART_0_tx_elements>

#if defined(__GNUC__)
	stdout = &USART_0_stream;
 94e:	80 e4       	ldi	r24, 0x40	; 64
 950:	91 e0       	ldi	r25, 0x01	; 1
 952:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <__iob+0x3>
 956:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__iob+0x2>
#endif

	return 0;
}
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	08 95       	ret

0000095e <printf>:
 95e:	a0 e0       	ldi	r26, 0x00	; 0
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	e5 eb       	ldi	r30, 0xB5	; 181
 964:	f4 e0       	ldi	r31, 0x04	; 4
 966:	0c 94 66 07 	jmp	0xecc	; 0xecc <__prologue_saves__+0x20>
 96a:	ae 01       	movw	r20, r28
 96c:	4b 5f       	subi	r20, 0xFB	; 251
 96e:	5f 4f       	sbci	r21, 0xFF	; 255
 970:	fa 01       	movw	r30, r20
 972:	61 91       	ld	r22, Z+
 974:	71 91       	ld	r23, Z+
 976:	af 01       	movw	r20, r30
 978:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__iob+0x2>
 97c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <__iob+0x3>
 980:	0e 94 c5 04 	call	0x98a	; 0x98a <vfprintf>
 984:	e2 e0       	ldi	r30, 0x02	; 2
 986:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__epilogue_restores__+0x20>

0000098a <vfprintf>:
 98a:	ab e0       	ldi	r26, 0x0B	; 11
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	eb ec       	ldi	r30, 0xCB	; 203
 990:	f4 e0       	ldi	r31, 0x04	; 4
 992:	0c 94 56 07 	jmp	0xeac	; 0xeac <__prologue_saves__>
 996:	6c 01       	movw	r12, r24
 998:	7b 01       	movw	r14, r22
 99a:	8a 01       	movw	r16, r20
 99c:	fc 01       	movw	r30, r24
 99e:	17 82       	std	Z+7, r1	; 0x07
 9a0:	16 82       	std	Z+6, r1	; 0x06
 9a2:	83 81       	ldd	r24, Z+3	; 0x03
 9a4:	81 ff       	sbrs	r24, 1
 9a6:	cc c1       	rjmp	.+920    	; 0xd40 <vfprintf+0x3b6>
 9a8:	ce 01       	movw	r24, r28
 9aa:	01 96       	adiw	r24, 0x01	; 1
 9ac:	3c 01       	movw	r6, r24
 9ae:	f6 01       	movw	r30, r12
 9b0:	93 81       	ldd	r25, Z+3	; 0x03
 9b2:	f7 01       	movw	r30, r14
 9b4:	93 fd       	sbrc	r25, 3
 9b6:	85 91       	lpm	r24, Z+
 9b8:	93 ff       	sbrs	r25, 3
 9ba:	81 91       	ld	r24, Z+
 9bc:	7f 01       	movw	r14, r30
 9be:	88 23       	and	r24, r24
 9c0:	09 f4       	brne	.+2      	; 0x9c4 <vfprintf+0x3a>
 9c2:	ba c1       	rjmp	.+884    	; 0xd38 <vfprintf+0x3ae>
 9c4:	85 32       	cpi	r24, 0x25	; 37
 9c6:	39 f4       	brne	.+14     	; 0x9d6 <vfprintf+0x4c>
 9c8:	93 fd       	sbrc	r25, 3
 9ca:	85 91       	lpm	r24, Z+
 9cc:	93 ff       	sbrs	r25, 3
 9ce:	81 91       	ld	r24, Z+
 9d0:	7f 01       	movw	r14, r30
 9d2:	85 32       	cpi	r24, 0x25	; 37
 9d4:	29 f4       	brne	.+10     	; 0x9e0 <vfprintf+0x56>
 9d6:	b6 01       	movw	r22, r12
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 9de:	e7 cf       	rjmp	.-50     	; 0x9ae <vfprintf+0x24>
 9e0:	91 2c       	mov	r9, r1
 9e2:	21 2c       	mov	r2, r1
 9e4:	31 2c       	mov	r3, r1
 9e6:	ff e1       	ldi	r31, 0x1F	; 31
 9e8:	f3 15       	cp	r31, r3
 9ea:	d8 f0       	brcs	.+54     	; 0xa22 <vfprintf+0x98>
 9ec:	8b 32       	cpi	r24, 0x2B	; 43
 9ee:	79 f0       	breq	.+30     	; 0xa0e <vfprintf+0x84>
 9f0:	38 f4       	brcc	.+14     	; 0xa00 <vfprintf+0x76>
 9f2:	80 32       	cpi	r24, 0x20	; 32
 9f4:	79 f0       	breq	.+30     	; 0xa14 <vfprintf+0x8a>
 9f6:	83 32       	cpi	r24, 0x23	; 35
 9f8:	a1 f4       	brne	.+40     	; 0xa22 <vfprintf+0x98>
 9fa:	23 2d       	mov	r18, r3
 9fc:	20 61       	ori	r18, 0x10	; 16
 9fe:	1d c0       	rjmp	.+58     	; 0xa3a <vfprintf+0xb0>
 a00:	8d 32       	cpi	r24, 0x2D	; 45
 a02:	61 f0       	breq	.+24     	; 0xa1c <vfprintf+0x92>
 a04:	80 33       	cpi	r24, 0x30	; 48
 a06:	69 f4       	brne	.+26     	; 0xa22 <vfprintf+0x98>
 a08:	23 2d       	mov	r18, r3
 a0a:	21 60       	ori	r18, 0x01	; 1
 a0c:	16 c0       	rjmp	.+44     	; 0xa3a <vfprintf+0xb0>
 a0e:	83 2d       	mov	r24, r3
 a10:	82 60       	ori	r24, 0x02	; 2
 a12:	38 2e       	mov	r3, r24
 a14:	e3 2d       	mov	r30, r3
 a16:	e4 60       	ori	r30, 0x04	; 4
 a18:	3e 2e       	mov	r3, r30
 a1a:	2a c0       	rjmp	.+84     	; 0xa70 <vfprintf+0xe6>
 a1c:	f3 2d       	mov	r31, r3
 a1e:	f8 60       	ori	r31, 0x08	; 8
 a20:	1d c0       	rjmp	.+58     	; 0xa5c <vfprintf+0xd2>
 a22:	37 fc       	sbrc	r3, 7
 a24:	2d c0       	rjmp	.+90     	; 0xa80 <vfprintf+0xf6>
 a26:	20 ed       	ldi	r18, 0xD0	; 208
 a28:	28 0f       	add	r18, r24
 a2a:	2a 30       	cpi	r18, 0x0A	; 10
 a2c:	40 f0       	brcs	.+16     	; 0xa3e <vfprintf+0xb4>
 a2e:	8e 32       	cpi	r24, 0x2E	; 46
 a30:	b9 f4       	brne	.+46     	; 0xa60 <vfprintf+0xd6>
 a32:	36 fc       	sbrc	r3, 6
 a34:	81 c1       	rjmp	.+770    	; 0xd38 <vfprintf+0x3ae>
 a36:	23 2d       	mov	r18, r3
 a38:	20 64       	ori	r18, 0x40	; 64
 a3a:	32 2e       	mov	r3, r18
 a3c:	19 c0       	rjmp	.+50     	; 0xa70 <vfprintf+0xe6>
 a3e:	36 fe       	sbrs	r3, 6
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <vfprintf+0xc4>
 a42:	8a e0       	ldi	r24, 0x0A	; 10
 a44:	98 9e       	mul	r9, r24
 a46:	20 0d       	add	r18, r0
 a48:	11 24       	eor	r1, r1
 a4a:	92 2e       	mov	r9, r18
 a4c:	11 c0       	rjmp	.+34     	; 0xa70 <vfprintf+0xe6>
 a4e:	ea e0       	ldi	r30, 0x0A	; 10
 a50:	2e 9e       	mul	r2, r30
 a52:	20 0d       	add	r18, r0
 a54:	11 24       	eor	r1, r1
 a56:	22 2e       	mov	r2, r18
 a58:	f3 2d       	mov	r31, r3
 a5a:	f0 62       	ori	r31, 0x20	; 32
 a5c:	3f 2e       	mov	r3, r31
 a5e:	08 c0       	rjmp	.+16     	; 0xa70 <vfprintf+0xe6>
 a60:	8c 36       	cpi	r24, 0x6C	; 108
 a62:	21 f4       	brne	.+8      	; 0xa6c <vfprintf+0xe2>
 a64:	83 2d       	mov	r24, r3
 a66:	80 68       	ori	r24, 0x80	; 128
 a68:	38 2e       	mov	r3, r24
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <vfprintf+0xe6>
 a6c:	88 36       	cpi	r24, 0x68	; 104
 a6e:	41 f4       	brne	.+16     	; 0xa80 <vfprintf+0xf6>
 a70:	f7 01       	movw	r30, r14
 a72:	93 fd       	sbrc	r25, 3
 a74:	85 91       	lpm	r24, Z+
 a76:	93 ff       	sbrs	r25, 3
 a78:	81 91       	ld	r24, Z+
 a7a:	7f 01       	movw	r14, r30
 a7c:	81 11       	cpse	r24, r1
 a7e:	b3 cf       	rjmp	.-154    	; 0x9e6 <vfprintf+0x5c>
 a80:	98 2f       	mov	r25, r24
 a82:	9f 7d       	andi	r25, 0xDF	; 223
 a84:	95 54       	subi	r25, 0x45	; 69
 a86:	93 30       	cpi	r25, 0x03	; 3
 a88:	28 f4       	brcc	.+10     	; 0xa94 <vfprintf+0x10a>
 a8a:	0c 5f       	subi	r16, 0xFC	; 252
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	9f e3       	ldi	r25, 0x3F	; 63
 a90:	99 83       	std	Y+1, r25	; 0x01
 a92:	0d c0       	rjmp	.+26     	; 0xaae <vfprintf+0x124>
 a94:	83 36       	cpi	r24, 0x63	; 99
 a96:	31 f0       	breq	.+12     	; 0xaa4 <vfprintf+0x11a>
 a98:	83 37       	cpi	r24, 0x73	; 115
 a9a:	71 f0       	breq	.+28     	; 0xab8 <vfprintf+0x12e>
 a9c:	83 35       	cpi	r24, 0x53	; 83
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <vfprintf+0x118>
 aa0:	59 c0       	rjmp	.+178    	; 0xb54 <vfprintf+0x1ca>
 aa2:	21 c0       	rjmp	.+66     	; 0xae6 <vfprintf+0x15c>
 aa4:	f8 01       	movw	r30, r16
 aa6:	80 81       	ld	r24, Z
 aa8:	89 83       	std	Y+1, r24	; 0x01
 aaa:	0e 5f       	subi	r16, 0xFE	; 254
 aac:	1f 4f       	sbci	r17, 0xFF	; 255
 aae:	88 24       	eor	r8, r8
 ab0:	83 94       	inc	r8
 ab2:	91 2c       	mov	r9, r1
 ab4:	53 01       	movw	r10, r6
 ab6:	13 c0       	rjmp	.+38     	; 0xade <vfprintf+0x154>
 ab8:	28 01       	movw	r4, r16
 aba:	f2 e0       	ldi	r31, 0x02	; 2
 abc:	4f 0e       	add	r4, r31
 abe:	51 1c       	adc	r5, r1
 ac0:	f8 01       	movw	r30, r16
 ac2:	a0 80       	ld	r10, Z
 ac4:	b1 80       	ldd	r11, Z+1	; 0x01
 ac6:	36 fe       	sbrs	r3, 6
 ac8:	03 c0       	rjmp	.+6      	; 0xad0 <vfprintf+0x146>
 aca:	69 2d       	mov	r22, r9
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <vfprintf+0x14a>
 ad0:	6f ef       	ldi	r22, 0xFF	; 255
 ad2:	7f ef       	ldi	r23, 0xFF	; 255
 ad4:	c5 01       	movw	r24, r10
 ad6:	0e 94 b1 06 	call	0xd62	; 0xd62 <strnlen>
 ada:	4c 01       	movw	r8, r24
 adc:	82 01       	movw	r16, r4
 ade:	f3 2d       	mov	r31, r3
 ae0:	ff 77       	andi	r31, 0x7F	; 127
 ae2:	3f 2e       	mov	r3, r31
 ae4:	16 c0       	rjmp	.+44     	; 0xb12 <vfprintf+0x188>
 ae6:	28 01       	movw	r4, r16
 ae8:	22 e0       	ldi	r18, 0x02	; 2
 aea:	42 0e       	add	r4, r18
 aec:	51 1c       	adc	r5, r1
 aee:	f8 01       	movw	r30, r16
 af0:	a0 80       	ld	r10, Z
 af2:	b1 80       	ldd	r11, Z+1	; 0x01
 af4:	36 fe       	sbrs	r3, 6
 af6:	03 c0       	rjmp	.+6      	; 0xafe <vfprintf+0x174>
 af8:	69 2d       	mov	r22, r9
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <vfprintf+0x178>
 afe:	6f ef       	ldi	r22, 0xFF	; 255
 b00:	7f ef       	ldi	r23, 0xFF	; 255
 b02:	c5 01       	movw	r24, r10
 b04:	0e 94 a6 06 	call	0xd4c	; 0xd4c <strnlen_P>
 b08:	4c 01       	movw	r8, r24
 b0a:	f3 2d       	mov	r31, r3
 b0c:	f0 68       	ori	r31, 0x80	; 128
 b0e:	3f 2e       	mov	r3, r31
 b10:	82 01       	movw	r16, r4
 b12:	33 fc       	sbrc	r3, 3
 b14:	1b c0       	rjmp	.+54     	; 0xb4c <vfprintf+0x1c2>
 b16:	82 2d       	mov	r24, r2
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	88 16       	cp	r8, r24
 b1c:	99 06       	cpc	r9, r25
 b1e:	b0 f4       	brcc	.+44     	; 0xb4c <vfprintf+0x1c2>
 b20:	b6 01       	movw	r22, r12
 b22:	80 e2       	ldi	r24, 0x20	; 32
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 b2a:	2a 94       	dec	r2
 b2c:	f4 cf       	rjmp	.-24     	; 0xb16 <vfprintf+0x18c>
 b2e:	f5 01       	movw	r30, r10
 b30:	37 fc       	sbrc	r3, 7
 b32:	85 91       	lpm	r24, Z+
 b34:	37 fe       	sbrs	r3, 7
 b36:	81 91       	ld	r24, Z+
 b38:	5f 01       	movw	r10, r30
 b3a:	b6 01       	movw	r22, r12
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 b42:	21 10       	cpse	r2, r1
 b44:	2a 94       	dec	r2
 b46:	21 e0       	ldi	r18, 0x01	; 1
 b48:	82 1a       	sub	r8, r18
 b4a:	91 08       	sbc	r9, r1
 b4c:	81 14       	cp	r8, r1
 b4e:	91 04       	cpc	r9, r1
 b50:	71 f7       	brne	.-36     	; 0xb2e <vfprintf+0x1a4>
 b52:	e8 c0       	rjmp	.+464    	; 0xd24 <vfprintf+0x39a>
 b54:	84 36       	cpi	r24, 0x64	; 100
 b56:	11 f0       	breq	.+4      	; 0xb5c <vfprintf+0x1d2>
 b58:	89 36       	cpi	r24, 0x69	; 105
 b5a:	41 f5       	brne	.+80     	; 0xbac <vfprintf+0x222>
 b5c:	f8 01       	movw	r30, r16
 b5e:	37 fe       	sbrs	r3, 7
 b60:	07 c0       	rjmp	.+14     	; 0xb70 <vfprintf+0x1e6>
 b62:	60 81       	ld	r22, Z
 b64:	71 81       	ldd	r23, Z+1	; 0x01
 b66:	82 81       	ldd	r24, Z+2	; 0x02
 b68:	93 81       	ldd	r25, Z+3	; 0x03
 b6a:	0c 5f       	subi	r16, 0xFC	; 252
 b6c:	1f 4f       	sbci	r17, 0xFF	; 255
 b6e:	08 c0       	rjmp	.+16     	; 0xb80 <vfprintf+0x1f6>
 b70:	60 81       	ld	r22, Z
 b72:	71 81       	ldd	r23, Z+1	; 0x01
 b74:	07 2e       	mov	r0, r23
 b76:	00 0c       	add	r0, r0
 b78:	88 0b       	sbc	r24, r24
 b7a:	99 0b       	sbc	r25, r25
 b7c:	0e 5f       	subi	r16, 0xFE	; 254
 b7e:	1f 4f       	sbci	r17, 0xFF	; 255
 b80:	f3 2d       	mov	r31, r3
 b82:	ff 76       	andi	r31, 0x6F	; 111
 b84:	3f 2e       	mov	r3, r31
 b86:	97 ff       	sbrs	r25, 7
 b88:	09 c0       	rjmp	.+18     	; 0xb9c <vfprintf+0x212>
 b8a:	90 95       	com	r25
 b8c:	80 95       	com	r24
 b8e:	70 95       	com	r23
 b90:	61 95       	neg	r22
 b92:	7f 4f       	sbci	r23, 0xFF	; 255
 b94:	8f 4f       	sbci	r24, 0xFF	; 255
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	f0 68       	ori	r31, 0x80	; 128
 b9a:	3f 2e       	mov	r3, r31
 b9c:	2a e0       	ldi	r18, 0x0A	; 10
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	a3 01       	movw	r20, r6
 ba2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__ultoa_invert>
 ba6:	88 2e       	mov	r8, r24
 ba8:	86 18       	sub	r8, r6
 baa:	45 c0       	rjmp	.+138    	; 0xc36 <vfprintf+0x2ac>
 bac:	85 37       	cpi	r24, 0x75	; 117
 bae:	31 f4       	brne	.+12     	; 0xbbc <vfprintf+0x232>
 bb0:	23 2d       	mov	r18, r3
 bb2:	2f 7e       	andi	r18, 0xEF	; 239
 bb4:	b2 2e       	mov	r11, r18
 bb6:	2a e0       	ldi	r18, 0x0A	; 10
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	25 c0       	rjmp	.+74     	; 0xc06 <vfprintf+0x27c>
 bbc:	93 2d       	mov	r25, r3
 bbe:	99 7f       	andi	r25, 0xF9	; 249
 bc0:	b9 2e       	mov	r11, r25
 bc2:	8f 36       	cpi	r24, 0x6F	; 111
 bc4:	c1 f0       	breq	.+48     	; 0xbf6 <vfprintf+0x26c>
 bc6:	18 f4       	brcc	.+6      	; 0xbce <vfprintf+0x244>
 bc8:	88 35       	cpi	r24, 0x58	; 88
 bca:	79 f0       	breq	.+30     	; 0xbea <vfprintf+0x260>
 bcc:	b5 c0       	rjmp	.+362    	; 0xd38 <vfprintf+0x3ae>
 bce:	80 37       	cpi	r24, 0x70	; 112
 bd0:	19 f0       	breq	.+6      	; 0xbd8 <vfprintf+0x24e>
 bd2:	88 37       	cpi	r24, 0x78	; 120
 bd4:	21 f0       	breq	.+8      	; 0xbde <vfprintf+0x254>
 bd6:	b0 c0       	rjmp	.+352    	; 0xd38 <vfprintf+0x3ae>
 bd8:	e9 2f       	mov	r30, r25
 bda:	e0 61       	ori	r30, 0x10	; 16
 bdc:	be 2e       	mov	r11, r30
 bde:	b4 fe       	sbrs	r11, 4
 be0:	0d c0       	rjmp	.+26     	; 0xbfc <vfprintf+0x272>
 be2:	fb 2d       	mov	r31, r11
 be4:	f4 60       	ori	r31, 0x04	; 4
 be6:	bf 2e       	mov	r11, r31
 be8:	09 c0       	rjmp	.+18     	; 0xbfc <vfprintf+0x272>
 bea:	34 fe       	sbrs	r3, 4
 bec:	0a c0       	rjmp	.+20     	; 0xc02 <vfprintf+0x278>
 bee:	29 2f       	mov	r18, r25
 bf0:	26 60       	ori	r18, 0x06	; 6
 bf2:	b2 2e       	mov	r11, r18
 bf4:	06 c0       	rjmp	.+12     	; 0xc02 <vfprintf+0x278>
 bf6:	28 e0       	ldi	r18, 0x08	; 8
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	05 c0       	rjmp	.+10     	; 0xc06 <vfprintf+0x27c>
 bfc:	20 e1       	ldi	r18, 0x10	; 16
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <vfprintf+0x27c>
 c02:	20 e1       	ldi	r18, 0x10	; 16
 c04:	32 e0       	ldi	r19, 0x02	; 2
 c06:	f8 01       	movw	r30, r16
 c08:	b7 fe       	sbrs	r11, 7
 c0a:	07 c0       	rjmp	.+14     	; 0xc1a <vfprintf+0x290>
 c0c:	60 81       	ld	r22, Z
 c0e:	71 81       	ldd	r23, Z+1	; 0x01
 c10:	82 81       	ldd	r24, Z+2	; 0x02
 c12:	93 81       	ldd	r25, Z+3	; 0x03
 c14:	0c 5f       	subi	r16, 0xFC	; 252
 c16:	1f 4f       	sbci	r17, 0xFF	; 255
 c18:	06 c0       	rjmp	.+12     	; 0xc26 <vfprintf+0x29c>
 c1a:	60 81       	ld	r22, Z
 c1c:	71 81       	ldd	r23, Z+1	; 0x01
 c1e:	80 e0       	ldi	r24, 0x00	; 0
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	0e 5f       	subi	r16, 0xFE	; 254
 c24:	1f 4f       	sbci	r17, 0xFF	; 255
 c26:	a3 01       	movw	r20, r6
 c28:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__ultoa_invert>
 c2c:	88 2e       	mov	r8, r24
 c2e:	86 18       	sub	r8, r6
 c30:	fb 2d       	mov	r31, r11
 c32:	ff 77       	andi	r31, 0x7F	; 127
 c34:	3f 2e       	mov	r3, r31
 c36:	36 fe       	sbrs	r3, 6
 c38:	0d c0       	rjmp	.+26     	; 0xc54 <vfprintf+0x2ca>
 c3a:	23 2d       	mov	r18, r3
 c3c:	2e 7f       	andi	r18, 0xFE	; 254
 c3e:	a2 2e       	mov	r10, r18
 c40:	89 14       	cp	r8, r9
 c42:	58 f4       	brcc	.+22     	; 0xc5a <vfprintf+0x2d0>
 c44:	34 fe       	sbrs	r3, 4
 c46:	0b c0       	rjmp	.+22     	; 0xc5e <vfprintf+0x2d4>
 c48:	32 fc       	sbrc	r3, 2
 c4a:	09 c0       	rjmp	.+18     	; 0xc5e <vfprintf+0x2d4>
 c4c:	83 2d       	mov	r24, r3
 c4e:	8e 7e       	andi	r24, 0xEE	; 238
 c50:	a8 2e       	mov	r10, r24
 c52:	05 c0       	rjmp	.+10     	; 0xc5e <vfprintf+0x2d4>
 c54:	b8 2c       	mov	r11, r8
 c56:	a3 2c       	mov	r10, r3
 c58:	03 c0       	rjmp	.+6      	; 0xc60 <vfprintf+0x2d6>
 c5a:	b8 2c       	mov	r11, r8
 c5c:	01 c0       	rjmp	.+2      	; 0xc60 <vfprintf+0x2d6>
 c5e:	b9 2c       	mov	r11, r9
 c60:	a4 fe       	sbrs	r10, 4
 c62:	0f c0       	rjmp	.+30     	; 0xc82 <vfprintf+0x2f8>
 c64:	fe 01       	movw	r30, r28
 c66:	e8 0d       	add	r30, r8
 c68:	f1 1d       	adc	r31, r1
 c6a:	80 81       	ld	r24, Z
 c6c:	80 33       	cpi	r24, 0x30	; 48
 c6e:	21 f4       	brne	.+8      	; 0xc78 <vfprintf+0x2ee>
 c70:	9a 2d       	mov	r25, r10
 c72:	99 7e       	andi	r25, 0xE9	; 233
 c74:	a9 2e       	mov	r10, r25
 c76:	09 c0       	rjmp	.+18     	; 0xc8a <vfprintf+0x300>
 c78:	a2 fe       	sbrs	r10, 2
 c7a:	06 c0       	rjmp	.+12     	; 0xc88 <vfprintf+0x2fe>
 c7c:	b3 94       	inc	r11
 c7e:	b3 94       	inc	r11
 c80:	04 c0       	rjmp	.+8      	; 0xc8a <vfprintf+0x300>
 c82:	8a 2d       	mov	r24, r10
 c84:	86 78       	andi	r24, 0x86	; 134
 c86:	09 f0       	breq	.+2      	; 0xc8a <vfprintf+0x300>
 c88:	b3 94       	inc	r11
 c8a:	a3 fc       	sbrc	r10, 3
 c8c:	11 c0       	rjmp	.+34     	; 0xcb0 <vfprintf+0x326>
 c8e:	a0 fe       	sbrs	r10, 0
 c90:	06 c0       	rjmp	.+12     	; 0xc9e <vfprintf+0x314>
 c92:	b2 14       	cp	r11, r2
 c94:	88 f4       	brcc	.+34     	; 0xcb8 <vfprintf+0x32e>
 c96:	28 0c       	add	r2, r8
 c98:	92 2c       	mov	r9, r2
 c9a:	9b 18       	sub	r9, r11
 c9c:	0e c0       	rjmp	.+28     	; 0xcba <vfprintf+0x330>
 c9e:	b2 14       	cp	r11, r2
 ca0:	60 f4       	brcc	.+24     	; 0xcba <vfprintf+0x330>
 ca2:	b6 01       	movw	r22, r12
 ca4:	80 e2       	ldi	r24, 0x20	; 32
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 cac:	b3 94       	inc	r11
 cae:	f7 cf       	rjmp	.-18     	; 0xc9e <vfprintf+0x314>
 cb0:	b2 14       	cp	r11, r2
 cb2:	18 f4       	brcc	.+6      	; 0xcba <vfprintf+0x330>
 cb4:	2b 18       	sub	r2, r11
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0x332>
 cb8:	98 2c       	mov	r9, r8
 cba:	21 2c       	mov	r2, r1
 cbc:	a4 fe       	sbrs	r10, 4
 cbe:	10 c0       	rjmp	.+32     	; 0xce0 <vfprintf+0x356>
 cc0:	b6 01       	movw	r22, r12
 cc2:	80 e3       	ldi	r24, 0x30	; 48
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 cca:	a2 fe       	sbrs	r10, 2
 ccc:	17 c0       	rjmp	.+46     	; 0xcfc <vfprintf+0x372>
 cce:	a1 fc       	sbrc	r10, 1
 cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <vfprintf+0x34e>
 cd2:	88 e7       	ldi	r24, 0x78	; 120
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	02 c0       	rjmp	.+4      	; 0xcdc <vfprintf+0x352>
 cd8:	88 e5       	ldi	r24, 0x58	; 88
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	b6 01       	movw	r22, r12
 cde:	0c c0       	rjmp	.+24     	; 0xcf8 <vfprintf+0x36e>
 ce0:	8a 2d       	mov	r24, r10
 ce2:	86 78       	andi	r24, 0x86	; 134
 ce4:	59 f0       	breq	.+22     	; 0xcfc <vfprintf+0x372>
 ce6:	a1 fe       	sbrs	r10, 1
 ce8:	02 c0       	rjmp	.+4      	; 0xcee <vfprintf+0x364>
 cea:	8b e2       	ldi	r24, 0x2B	; 43
 cec:	01 c0       	rjmp	.+2      	; 0xcf0 <vfprintf+0x366>
 cee:	80 e2       	ldi	r24, 0x20	; 32
 cf0:	a7 fc       	sbrc	r10, 7
 cf2:	8d e2       	ldi	r24, 0x2D	; 45
 cf4:	b6 01       	movw	r22, r12
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 cfc:	89 14       	cp	r8, r9
 cfe:	38 f4       	brcc	.+14     	; 0xd0e <vfprintf+0x384>
 d00:	b6 01       	movw	r22, r12
 d02:	80 e3       	ldi	r24, 0x30	; 48
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 d0a:	9a 94       	dec	r9
 d0c:	f7 cf       	rjmp	.-18     	; 0xcfc <vfprintf+0x372>
 d0e:	8a 94       	dec	r8
 d10:	f3 01       	movw	r30, r6
 d12:	e8 0d       	add	r30, r8
 d14:	f1 1d       	adc	r31, r1
 d16:	80 81       	ld	r24, Z
 d18:	b6 01       	movw	r22, r12
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 d20:	81 10       	cpse	r8, r1
 d22:	f5 cf       	rjmp	.-22     	; 0xd0e <vfprintf+0x384>
 d24:	22 20       	and	r2, r2
 d26:	09 f4       	brne	.+2      	; 0xd2a <vfprintf+0x3a0>
 d28:	42 ce       	rjmp	.-892    	; 0x9ae <vfprintf+0x24>
 d2a:	b6 01       	movw	r22, r12
 d2c:	80 e2       	ldi	r24, 0x20	; 32
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 d34:	2a 94       	dec	r2
 d36:	f6 cf       	rjmp	.-20     	; 0xd24 <vfprintf+0x39a>
 d38:	f6 01       	movw	r30, r12
 d3a:	86 81       	ldd	r24, Z+6	; 0x06
 d3c:	97 81       	ldd	r25, Z+7	; 0x07
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <vfprintf+0x3ba>
 d40:	8f ef       	ldi	r24, 0xFF	; 255
 d42:	9f ef       	ldi	r25, 0xFF	; 255
 d44:	2b 96       	adiw	r28, 0x0b	; 11
 d46:	e2 e1       	ldi	r30, 0x12	; 18
 d48:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__epilogue_restores__>

00000d4c <strnlen_P>:
 d4c:	fc 01       	movw	r30, r24
 d4e:	05 90       	lpm	r0, Z+
 d50:	61 50       	subi	r22, 0x01	; 1
 d52:	70 40       	sbci	r23, 0x00	; 0
 d54:	01 10       	cpse	r0, r1
 d56:	d8 f7       	brcc	.-10     	; 0xd4e <strnlen_P+0x2>
 d58:	80 95       	com	r24
 d5a:	90 95       	com	r25
 d5c:	8e 0f       	add	r24, r30
 d5e:	9f 1f       	adc	r25, r31
 d60:	08 95       	ret

00000d62 <strnlen>:
 d62:	fc 01       	movw	r30, r24
 d64:	61 50       	subi	r22, 0x01	; 1
 d66:	70 40       	sbci	r23, 0x00	; 0
 d68:	01 90       	ld	r0, Z+
 d6a:	01 10       	cpse	r0, r1
 d6c:	d8 f7       	brcc	.-10     	; 0xd64 <strnlen+0x2>
 d6e:	80 95       	com	r24
 d70:	90 95       	com	r25
 d72:	8e 0f       	add	r24, r30
 d74:	9f 1f       	adc	r25, r31
 d76:	08 95       	ret

00000d78 <fputc>:
 d78:	0f 93       	push	r16
 d7a:	1f 93       	push	r17
 d7c:	cf 93       	push	r28
 d7e:	df 93       	push	r29
 d80:	fb 01       	movw	r30, r22
 d82:	23 81       	ldd	r18, Z+3	; 0x03
 d84:	21 fd       	sbrc	r18, 1
 d86:	03 c0       	rjmp	.+6      	; 0xd8e <fputc+0x16>
 d88:	8f ef       	ldi	r24, 0xFF	; 255
 d8a:	9f ef       	ldi	r25, 0xFF	; 255
 d8c:	2c c0       	rjmp	.+88     	; 0xde6 <fputc+0x6e>
 d8e:	22 ff       	sbrs	r18, 2
 d90:	16 c0       	rjmp	.+44     	; 0xdbe <fputc+0x46>
 d92:	46 81       	ldd	r20, Z+6	; 0x06
 d94:	57 81       	ldd	r21, Z+7	; 0x07
 d96:	24 81       	ldd	r18, Z+4	; 0x04
 d98:	35 81       	ldd	r19, Z+5	; 0x05
 d9a:	42 17       	cp	r20, r18
 d9c:	53 07       	cpc	r21, r19
 d9e:	44 f4       	brge	.+16     	; 0xdb0 <fputc+0x38>
 da0:	a0 81       	ld	r26, Z
 da2:	b1 81       	ldd	r27, Z+1	; 0x01
 da4:	9d 01       	movw	r18, r26
 da6:	2f 5f       	subi	r18, 0xFF	; 255
 da8:	3f 4f       	sbci	r19, 0xFF	; 255
 daa:	31 83       	std	Z+1, r19	; 0x01
 dac:	20 83       	st	Z, r18
 dae:	8c 93       	st	X, r24
 db0:	26 81       	ldd	r18, Z+6	; 0x06
 db2:	37 81       	ldd	r19, Z+7	; 0x07
 db4:	2f 5f       	subi	r18, 0xFF	; 255
 db6:	3f 4f       	sbci	r19, 0xFF	; 255
 db8:	37 83       	std	Z+7, r19	; 0x07
 dba:	26 83       	std	Z+6, r18	; 0x06
 dbc:	14 c0       	rjmp	.+40     	; 0xde6 <fputc+0x6e>
 dbe:	8b 01       	movw	r16, r22
 dc0:	ec 01       	movw	r28, r24
 dc2:	fb 01       	movw	r30, r22
 dc4:	00 84       	ldd	r0, Z+8	; 0x08
 dc6:	f1 85       	ldd	r31, Z+9	; 0x09
 dc8:	e0 2d       	mov	r30, r0
 dca:	09 95       	icall
 dcc:	89 2b       	or	r24, r25
 dce:	e1 f6       	brne	.-72     	; 0xd88 <fputc+0x10>
 dd0:	d8 01       	movw	r26, r16
 dd2:	16 96       	adiw	r26, 0x06	; 6
 dd4:	8d 91       	ld	r24, X+
 dd6:	9c 91       	ld	r25, X
 dd8:	17 97       	sbiw	r26, 0x07	; 7
 dda:	01 96       	adiw	r24, 0x01	; 1
 ddc:	17 96       	adiw	r26, 0x07	; 7
 dde:	9c 93       	st	X, r25
 de0:	8e 93       	st	-X, r24
 de2:	16 97       	sbiw	r26, 0x06	; 6
 de4:	ce 01       	movw	r24, r28
 de6:	df 91       	pop	r29
 de8:	cf 91       	pop	r28
 dea:	1f 91       	pop	r17
 dec:	0f 91       	pop	r16
 dee:	08 95       	ret

00000df0 <__ultoa_invert>:
 df0:	fa 01       	movw	r30, r20
 df2:	aa 27       	eor	r26, r26
 df4:	28 30       	cpi	r18, 0x08	; 8
 df6:	51 f1       	breq	.+84     	; 0xe4c <__ultoa_invert+0x5c>
 df8:	20 31       	cpi	r18, 0x10	; 16
 dfa:	81 f1       	breq	.+96     	; 0xe5c <__ultoa_invert+0x6c>
 dfc:	e8 94       	clt
 dfe:	6f 93       	push	r22
 e00:	6e 7f       	andi	r22, 0xFE	; 254
 e02:	6e 5f       	subi	r22, 0xFE	; 254
 e04:	7f 4f       	sbci	r23, 0xFF	; 255
 e06:	8f 4f       	sbci	r24, 0xFF	; 255
 e08:	9f 4f       	sbci	r25, 0xFF	; 255
 e0a:	af 4f       	sbci	r26, 0xFF	; 255
 e0c:	b1 e0       	ldi	r27, 0x01	; 1
 e0e:	3e d0       	rcall	.+124    	; 0xe8c <__ultoa_invert+0x9c>
 e10:	b4 e0       	ldi	r27, 0x04	; 4
 e12:	3c d0       	rcall	.+120    	; 0xe8c <__ultoa_invert+0x9c>
 e14:	67 0f       	add	r22, r23
 e16:	78 1f       	adc	r23, r24
 e18:	89 1f       	adc	r24, r25
 e1a:	9a 1f       	adc	r25, r26
 e1c:	a1 1d       	adc	r26, r1
 e1e:	68 0f       	add	r22, r24
 e20:	79 1f       	adc	r23, r25
 e22:	8a 1f       	adc	r24, r26
 e24:	91 1d       	adc	r25, r1
 e26:	a1 1d       	adc	r26, r1
 e28:	6a 0f       	add	r22, r26
 e2a:	71 1d       	adc	r23, r1
 e2c:	81 1d       	adc	r24, r1
 e2e:	91 1d       	adc	r25, r1
 e30:	a1 1d       	adc	r26, r1
 e32:	20 d0       	rcall	.+64     	; 0xe74 <__ultoa_invert+0x84>
 e34:	09 f4       	brne	.+2      	; 0xe38 <__ultoa_invert+0x48>
 e36:	68 94       	set
 e38:	3f 91       	pop	r19
 e3a:	2a e0       	ldi	r18, 0x0A	; 10
 e3c:	26 9f       	mul	r18, r22
 e3e:	11 24       	eor	r1, r1
 e40:	30 19       	sub	r19, r0
 e42:	30 5d       	subi	r19, 0xD0	; 208
 e44:	31 93       	st	Z+, r19
 e46:	de f6       	brtc	.-74     	; 0xdfe <__ultoa_invert+0xe>
 e48:	cf 01       	movw	r24, r30
 e4a:	08 95       	ret
 e4c:	46 2f       	mov	r20, r22
 e4e:	47 70       	andi	r20, 0x07	; 7
 e50:	40 5d       	subi	r20, 0xD0	; 208
 e52:	41 93       	st	Z+, r20
 e54:	b3 e0       	ldi	r27, 0x03	; 3
 e56:	0f d0       	rcall	.+30     	; 0xe76 <__ultoa_invert+0x86>
 e58:	c9 f7       	brne	.-14     	; 0xe4c <__ultoa_invert+0x5c>
 e5a:	f6 cf       	rjmp	.-20     	; 0xe48 <__ultoa_invert+0x58>
 e5c:	46 2f       	mov	r20, r22
 e5e:	4f 70       	andi	r20, 0x0F	; 15
 e60:	40 5d       	subi	r20, 0xD0	; 208
 e62:	4a 33       	cpi	r20, 0x3A	; 58
 e64:	18 f0       	brcs	.+6      	; 0xe6c <__ultoa_invert+0x7c>
 e66:	49 5d       	subi	r20, 0xD9	; 217
 e68:	31 fd       	sbrc	r19, 1
 e6a:	40 52       	subi	r20, 0x20	; 32
 e6c:	41 93       	st	Z+, r20
 e6e:	02 d0       	rcall	.+4      	; 0xe74 <__ultoa_invert+0x84>
 e70:	a9 f7       	brne	.-22     	; 0xe5c <__ultoa_invert+0x6c>
 e72:	ea cf       	rjmp	.-44     	; 0xe48 <__ultoa_invert+0x58>
 e74:	b4 e0       	ldi	r27, 0x04	; 4
 e76:	a6 95       	lsr	r26
 e78:	97 95       	ror	r25
 e7a:	87 95       	ror	r24
 e7c:	77 95       	ror	r23
 e7e:	67 95       	ror	r22
 e80:	ba 95       	dec	r27
 e82:	c9 f7       	brne	.-14     	; 0xe76 <__ultoa_invert+0x86>
 e84:	00 97       	sbiw	r24, 0x00	; 0
 e86:	61 05       	cpc	r22, r1
 e88:	71 05       	cpc	r23, r1
 e8a:	08 95       	ret
 e8c:	9b 01       	movw	r18, r22
 e8e:	ac 01       	movw	r20, r24
 e90:	0a 2e       	mov	r0, r26
 e92:	06 94       	lsr	r0
 e94:	57 95       	ror	r21
 e96:	47 95       	ror	r20
 e98:	37 95       	ror	r19
 e9a:	27 95       	ror	r18
 e9c:	ba 95       	dec	r27
 e9e:	c9 f7       	brne	.-14     	; 0xe92 <__ultoa_invert+0xa2>
 ea0:	62 0f       	add	r22, r18
 ea2:	73 1f       	adc	r23, r19
 ea4:	84 1f       	adc	r24, r20
 ea6:	95 1f       	adc	r25, r21
 ea8:	a0 1d       	adc	r26, r0
 eaa:	08 95       	ret

00000eac <__prologue_saves__>:
 eac:	2f 92       	push	r2
 eae:	3f 92       	push	r3
 eb0:	4f 92       	push	r4
 eb2:	5f 92       	push	r5
 eb4:	6f 92       	push	r6
 eb6:	7f 92       	push	r7
 eb8:	8f 92       	push	r8
 eba:	9f 92       	push	r9
 ebc:	af 92       	push	r10
 ebe:	bf 92       	push	r11
 ec0:	cf 92       	push	r12
 ec2:	df 92       	push	r13
 ec4:	ef 92       	push	r14
 ec6:	ff 92       	push	r15
 ec8:	0f 93       	push	r16
 eca:	1f 93       	push	r17
 ecc:	cf 93       	push	r28
 ece:	df 93       	push	r29
 ed0:	cd b7       	in	r28, 0x3d	; 61
 ed2:	de b7       	in	r29, 0x3e	; 62
 ed4:	ca 1b       	sub	r28, r26
 ed6:	db 0b       	sbc	r29, r27
 ed8:	0f b6       	in	r0, 0x3f	; 63
 eda:	f8 94       	cli
 edc:	de bf       	out	0x3e, r29	; 62
 ede:	0f be       	out	0x3f, r0	; 63
 ee0:	cd bf       	out	0x3d, r28	; 61
 ee2:	09 94       	ijmp

00000ee4 <__epilogue_restores__>:
 ee4:	2a 88       	ldd	r2, Y+18	; 0x12
 ee6:	39 88       	ldd	r3, Y+17	; 0x11
 ee8:	48 88       	ldd	r4, Y+16	; 0x10
 eea:	5f 84       	ldd	r5, Y+15	; 0x0f
 eec:	6e 84       	ldd	r6, Y+14	; 0x0e
 eee:	7d 84       	ldd	r7, Y+13	; 0x0d
 ef0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ef2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ef4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ef6:	b9 84       	ldd	r11, Y+9	; 0x09
 ef8:	c8 84       	ldd	r12, Y+8	; 0x08
 efa:	df 80       	ldd	r13, Y+7	; 0x07
 efc:	ee 80       	ldd	r14, Y+6	; 0x06
 efe:	fd 80       	ldd	r15, Y+5	; 0x05
 f00:	0c 81       	ldd	r16, Y+4	; 0x04
 f02:	1b 81       	ldd	r17, Y+3	; 0x03
 f04:	aa 81       	ldd	r26, Y+2	; 0x02
 f06:	b9 81       	ldd	r27, Y+1	; 0x01
 f08:	ce 0f       	add	r28, r30
 f0a:	d1 1d       	adc	r29, r1
 f0c:	0f b6       	in	r0, 0x3f	; 63
 f0e:	f8 94       	cli
 f10:	de bf       	out	0x3e, r29	; 62
 f12:	0f be       	out	0x3f, r0	; 63
 f14:	cd bf       	out	0x3d, r28	; 61
 f16:	ed 01       	movw	r28, r26
 f18:	08 95       	ret

00000f1a <_exit>:
 f1a:	f8 94       	cli

00000f1c <__stop_program>:
 f1c:	ff cf       	rjmp	.-2      	; 0xf1c <__stop_program>
