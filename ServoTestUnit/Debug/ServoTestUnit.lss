
ServoTestUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070b  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000647  00000000  00000000  00000a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ef  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b1  00000000  00000000  000017a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	72 c0       	rjmp	.+228    	; 0x126 <__vector_16>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	02 d0       	rcall	.+4      	; 0x8a <main>
  86:	df c0       	rjmp	.+446    	; 0x246 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <main>:
volatile uint16_t SwitchCount = 0;		// Delaycounter for SwitchServo to switch to next position

int main(void)
{
	// PWM Ports as output
	DDRB |= (1 << PB1) | (1 << PB2);
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	86 60       	ori	r24, 0x06	; 6
  8e:	84 b9       	out	0x04, r24	; 4

	//Pinconfig
	SwitchInDir |= (1 << SwitchInUpLED) | (1 << SwitchInMidLED) | (1 << SwitchInLowLED);	// ouptut for LEDs
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8c 61       	ori	r24, 0x1C	; 28
  94:	8a b9       	out	0x0a, r24	; 10
	SwitchInPort |= (1 << SwitchInUpPin) | (1 << SwitchInDownPin);							// Pullup Resistors for Switches
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	8b b9       	out	0x0b, r24	; 11

	// Einstellungen für Analog Servo (600µs - 1500µs - 2400µs) 50Hz
	SwitchPos[0] = 1500;// - 375;
  9c:	a3 e0       	ldi	r26, 0x03	; 3
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	8c ed       	ldi	r24, 0xDC	; 220
  a2:	95 e0       	ldi	r25, 0x05	; 5
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	9c 93       	st	X, r25
  a8:	8e 93       	st	-X, r24
	SwitchPos[2] = 4500;// - 1125;
  aa:	84 e9       	ldi	r24, 0x94	; 148
  ac:	91 e1       	ldi	r25, 0x11	; 17
  ae:	15 96       	adiw	r26, 0x05	; 5
  b0:	9c 93       	st	X, r25
  b2:	8e 93       	st	-X, r24
  b4:	14 97       	sbiw	r26, 0x04	; 4
	SwitchPos[1] = 3000;// - 750;
  b6:	88 eb       	ldi	r24, 0xB8	; 184
  b8:	9b e0       	ldi	r25, 0x0B	; 11
  ba:	13 96       	adiw	r26, 0x03	; 3
  bc:	9c 93       	st	X, r25
  be:	8e 93       	st	-X, r24
  c0:	12 97       	sbiw	r26, 0x02	; 2

	// init PWM Timer 1
	TCCR1A |= (1 << WGM11);
  c2:	c0 e8       	ldi	r28, 0x80	; 128
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	88 81       	ld	r24, Y
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	88 83       	st	Y, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);		// Timer Mode FastPWM
  cc:	e1 e8       	ldi	r30, 0x81	; 129
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24

	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);	// enable Timeroutputpins (non-inverting mode)
  d6:	88 81       	ld	r24, Y
  d8:	80 6a       	ori	r24, 0xA0	; 160
  da:	88 83       	st	Y, r24
	ICR1 = 39999; // - 10000;					// set Frequency for analog Servomotors (50Hz) => (16MHz / N=8 / 50 Hz) - 1 = 39999 
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	9c e9       	ldi	r25, 0x9C	; 156
  e0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  e4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	// init PWM Timer0 (switch query)
	TIMSK0 |= (1 << TOIE0);					// ~61 times per second
  e8:	ce e6       	ldi	r28, 0x6E	; 110
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	88 81       	ld	r24, Y
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	88 83       	st	Y, r24

	servoSwitch = SwitchPos[0];				// Switchservo to default (0°)
  f2:	8d 91       	ld	r24, X+
  f4:	9c 91       	ld	r25, X
  f6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	SwitchIdx = 0;
  fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SwitchIdx>
	servo1 = 1200;							// Servo 1 to default (90°)
 102:	80 eb       	ldi	r24, 0xB0	; 176
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	SwitchCount = 0; 
 10e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 112:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	TCCR0B |= (1 << CS02) | (1 << CS00);
 116:	85 b5       	in	r24, 0x25	; 37
 118:	85 60       	ori	r24, 0x05	; 5
 11a:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1 << CS11);					//set prescaler N = 8 for 16MHz and start Timer 1
 11c:	80 81       	ld	r24, Z
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	80 83       	st	Z, r24
	
	sei();
 122:	78 94       	sei
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x9a>

00000126 <__vector_16>:
    while (1) {    }
}

ISR(TIMER0_OVF_vect) {
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	uint8_t newPosition = (SwitchInPins & ((1 << SwitchInUpPin) | (1 << SwitchInDownPin)));
 13c:	89 b1       	in	r24, 0x09	; 9
 13e:	83 70       	andi	r24, 0x03	; 3
	if((newPosition == SwitchIdx) && (SwitchCount < SwitchDelay)) {
 140:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <SwitchIdx>
 144:	89 13       	cpse	r24, r25
 146:	64 c0       	rjmp	.+200    	; 0x210 <__vector_16+0xea>
 148:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 14c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 150:	29 31       	cpi	r18, 0x19	; 25
 152:	31 05       	cpc	r19, r1
 154:	08 f4       	brcc	.+2      	; 0x158 <__vector_16+0x32>
 156:	63 c0       	rjmp	.+198    	; 0x21e <__vector_16+0xf8>
 158:	5b c0       	rjmp	.+182    	; 0x210 <__vector_16+0xea>
		SwitchCount++;
	} else {
		switch (newPosition) {
			case 1:
				SwitchCount = 0;
 15a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 15e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				if (SwitchIdx < 2) {
 162:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SwitchIdx>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	e8 f5       	brcc	.+122    	; 0x1e4 <__vector_16+0xbe>
					SwitchIdx++;
 16a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SwitchIdx>
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SwitchIdx>
					servoSwitch = SwitchPos[SwitchIdx];
 174:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SwitchIdx>
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ed 5f       	subi	r30, 0xFD	; 253
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	80 81       	ld	r24, Z
 184:	91 81       	ldd	r25, Z+1	; 0x01
 186:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 18a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 18e:	2a c0       	rjmp	.+84     	; 0x1e4 <__vector_16+0xbe>
				}
				break;
			case 2:
				SwitchCount = 0;
 190:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 194:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				if (SwitchIdx > 0) {
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SwitchIdx>
 19c:	88 23       	and	r24, r24
 19e:	11 f1       	breq	.+68     	; 0x1e4 <__vector_16+0xbe>
					SwitchIdx--;
 1a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SwitchIdx>
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SwitchIdx>
					servoSwitch = SwitchPos[SwitchIdx];
 1aa:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SwitchIdx>
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	ed 5f       	subi	r30, 0xFD	; 253
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	80 81       	ld	r24, Z
 1ba:	91 81       	ldd	r25, Z+1	; 0x01
 1bc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1c0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1c4:	0f c0       	rjmp	.+30     	; 0x1e4 <__vector_16+0xbe>
				}
				break;
			default:
				if (SwitchCount < SwitchDelay)
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ce:	49 97       	sbiw	r24, 0x19	; 25
 1d0:	48 f4       	brcc	.+18     	; 0x1e4 <__vector_16+0xbe>
					SwitchCount++;
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				break;
		} // switch

		switch (SwitchIdx) {
 1e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SwitchIdx>
 1e8:	88 23       	and	r24, r24
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <__vector_16+0xcc>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	31 f0       	breq	.+12     	; 0x1fc <__vector_16+0xd6>
 1f0:	0a c0       	rjmp	.+20     	; 0x206 <__vector_16+0xe0>
			case 0:
				SwitchInPort &= ~((1 << SwitchInMidLED) | (1 << SwitchInUpLED));
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	83 7f       	andi	r24, 0xF3	; 243
 1f6:	8b b9       	out	0x0b, r24	; 11
				SwitchInPort |= (1 << SwitchInLowLED);
 1f8:	5c 9a       	sbi	0x0b, 4	; 11
				break;
 1fa:	1a c0       	rjmp	.+52     	; 0x230 <__vector_16+0x10a>
			case 1:
				SwitchInPort &= ~((1 << SwitchInLowLED) | (1 << SwitchInUpLED));
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	8b 7e       	andi	r24, 0xEB	; 235
 200:	8b b9       	out	0x0b, r24	; 11
				SwitchInPort |= (1 << SwitchInMidLED);
 202:	5b 9a       	sbi	0x0b, 3	; 11
				break;
 204:	15 c0       	rjmp	.+42     	; 0x230 <__vector_16+0x10a>
			default:
				SwitchInPort &= ~((1 << SwitchInMidLED) | (1 << SwitchInLowLED));
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	87 7e       	andi	r24, 0xE7	; 231
 20a:	8b b9       	out	0x0b, r24	; 11
				SwitchInPort |= (1 << SwitchInUpLED);
 20c:	5a 9a       	sbi	0x0b, 2	; 11
				break;	
		}
	}
 20e:	10 c0       	rjmp	.+32     	; 0x230 <__vector_16+0x10a>
ISR(TIMER0_OVF_vect) {
	uint8_t newPosition = (SwitchInPins & ((1 << SwitchInUpPin) | (1 << SwitchInDownPin)));
	if((newPosition == SwitchIdx) && (SwitchCount < SwitchDelay)) {
		SwitchCount++;
	} else {
		switch (newPosition) {
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	09 f4       	brne	.+2      	; 0x216 <__vector_16+0xf0>
 214:	a2 cf       	rjmp	.-188    	; 0x15a <__vector_16+0x34>
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	09 f4       	brne	.+2      	; 0x21c <__vector_16+0xf6>
 21a:	ba cf       	rjmp	.-140    	; 0x190 <__vector_16+0x6a>
 21c:	d4 cf       	rjmp	.-88     	; 0x1c6 <__vector_16+0xa0>
}

ISR(TIMER0_OVF_vect) {
	uint8_t newPosition = (SwitchInPins & ((1 << SwitchInUpPin) | (1 << SwitchInDownPin)));
	if((newPosition == SwitchIdx) && (SwitchCount < SwitchDelay)) {
		SwitchCount++;
 21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 222:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 22c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				SwitchInPort &= ~((1 << SwitchInMidLED) | (1 << SwitchInLowLED));
				SwitchInPort |= (1 << SwitchInUpLED);
				break;	
		}
	}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
