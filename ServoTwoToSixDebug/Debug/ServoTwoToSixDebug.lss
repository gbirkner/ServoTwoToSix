
ServoTwoToSixDebug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000182  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  0000021c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a9  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098d  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e7  00000000  00000000  0000217a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c7  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009eb  00000000  00000000  00002e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003826  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	75 00       	.word	0x0075	; ????

0000006a <__ctors_end>:
  6a:	7a 00       	.word	0x007a	; ????

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e2 e8       	ldi	r30, 0x82	; 130
  80:	f1 e0       	ldi	r31, 0x01	; 1
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a6 30       	cpi	r26, 0x06	; 6
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a6 e0       	ldi	r26, 0x06	; 6
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a7 30       	cpi	r26, 0x07	; 7
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 ae 00 	call	0x15c	; 0x15c <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  b8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <main>:


int main(void)
{

	uart.enable();
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	0e 94 a8 00 	call	0x150	; 0x150 <_ZN6myUart6enableEv>
	uart.write((char*)"Test");
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	71 e0       	ldi	r23, 0x01	; 1
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN6myUart5writeEPc>

    /* Replace with your application code */
    while (1) 
    {
		uart.write((unsigned char)(97));
  d4:	61 e6       	ldi	r22, 0x61	; 97
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN6myUart5writeEh>
		uart.write((unsigned char)(98));
  de:	62 e6       	ldi	r22, 0x62	; 98
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN6myUart5writeEh>
  e8:	f5 cf       	rjmp	.-22     	; 0xd4 <main+0x14>

000000ea <_GLOBAL__sub_I_uart>:
 */ 

#include <avr/io.h>
#include "myUart.h"

myUart uart;
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN6myUartC1Ev>
  f2:	08 95       	ret

000000f4 <_GLOBAL__sub_D_uart>:
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN6myUartD1Ev>
  fc:	08 95       	ret

000000fe <_ZN6myUart5writeEh>:


unsigned char myUart::read() {
	while( !(UCSR0A & (1<<RXC0)));
	return UDR0;
}
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	85 ff       	sbrs	r24, 5
 106:	fd cf       	rjmp	.-6      	; 0x102 <_ZN6myUart5writeEh+0x4>
 108:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10c:	08 95       	ret

0000010e <_ZN6myUart5writeEPc>:
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	eb 01       	movw	r28, r22
 118:	68 81       	ld	r22, Y
 11a:	66 23       	and	r22, r22
 11c:	41 f0       	breq	.+16     	; 0x12e <_ZN6myUart5writeEPc+0x20>
 11e:	8c 01       	movw	r16, r24
 120:	21 96       	adiw	r28, 0x01	; 1
 122:	c8 01       	movw	r24, r16
 124:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN6myUart5writeEh>
 128:	69 91       	ld	r22, Y+
 12a:	61 11       	cpse	r22, r1
 12c:	fa cf       	rjmp	.-12     	; 0x122 <_ZN6myUart5writeEPc+0x14>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <_ZN6myUartC1Ev>:
 138:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 13c:	83 e3       	ldi	r24, 0x33	; 51
 13e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 142:	e2 ec       	ldi	r30, 0xC2	; 194
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	86 60       	ori	r24, 0x06	; 6
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <_ZN6myUartD1Ev>:
 14e:	08 95       	ret

00000150 <_ZN6myUart6enableEv>:

void myUart::enable()
{
	  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  // UART RX, TX 
 150:	e1 ec       	ldi	r30, 0xC1	; 193
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 61       	ori	r24, 0x18	; 24
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret

0000015c <__tablejump2__>:
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	05 90       	lpm	r0, Z+
 162:	f4 91       	lpm	r31, Z
 164:	e0 2d       	mov	r30, r0
 166:	09 94       	ijmp

00000168 <__do_global_dtors>:
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	c5 e3       	ldi	r28, 0x35	; 53
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	04 c0       	rjmp	.+8      	; 0x178 <__do_global_dtors+0x10>
 170:	fe 01       	movw	r30, r28
 172:	0e 94 ae 00 	call	0x15c	; 0x15c <__tablejump2__>
 176:	21 96       	adiw	r28, 0x01	; 1
 178:	c6 33       	cpi	r28, 0x36	; 54
 17a:	d1 07       	cpc	r29, r17
 17c:	c9 f7       	brne	.-14     	; 0x170 <__do_global_dtors+0x8>
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
